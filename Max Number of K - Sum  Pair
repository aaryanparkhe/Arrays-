
    #USING HASHMAP :- 
    
    class Solution {
    public int maxOperations(int[] nums, int k) {
    
    
        // HashMap<Integer,Integer> hm = new HashMap<>();
        // int count = 0;
        // for(int i=0 ; i<nums.length ; i++){
        //      if(hm.containsKey(k-nums[i]) && hm.get(k-nums[i])>0){
        //          count++;
        //          hm.replace(k-nums[i],hm.get(k-nums[i])-1);
        //      }
        //     else {
        //         hm.put(nums[i] , hm.getOrDefault(nums[i],0)+1);
        //     }
        // }
        // return count;
           // }
//}
          
          Time Complexity :- 0(n)
          Space Complexity :- 0(n)
          
          
          
          
        # TWO POINTER APPROACH :-
        
        class Solution {
    public int maxOperations(int[] nums, int k) {
    
    
        Arrays.sort(nums);
        int count = 0;
        int i = 0;
        int j = nums.length-1;
        while(i<j){
            if(nums[i]+nums[j]==k){
                count++;
                i++;
                j--;
            } else if(nums[i]+nums[j]<k){
                i--;
            } else {
                j++;
            }
           
        }
        
        return count;
        
        }
}


 Time Complexity :- 0(n*log(n))
          Space Complexity :- 0(1)
